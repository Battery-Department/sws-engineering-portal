// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  name          String?
  password      String?
  role          String   @default("customer")
  externalId    String?
  mondayUserId  String?
  copilotUserId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions ChatSession[]
  messages Message[]
  customer Customer?
  cart     Cart?

  @@index([email])
  @@index([externalId])
  @@index([mondayUserId])
  @@index([copilotUserId])
}

model ChatSession {
  id           String   @id
  title        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  systemPrompt String?
  isActive     Boolean  @default(true)

  // Metadata
  userId       String?
  userName     String?
  userEmail    String?
  ipAddress    String?
  location     String?
  source       String?
  category     String?
  mondayItemId String?

  // Sync statuses
  mondaySynced    Boolean   @default(false)
  copilotSynced   Boolean   @default(false)
  databaseSynced  Boolean   @default(true)
  lastMondaySync  DateTime?
  lastCopilotSync DateTime?

  // Relations
  user     User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages Message[]
  tags     SessionTag[]

  @@index([userId])
  @@index([mondayItemId])
  @@index([createdAt])
  @@index([source])
}

model Message {
  id        String   @id
  sessionId String
  role      String // "user", "assistant", "system", "function"
  content   String
  timestamp DateTime @default(now())
  isError   Boolean? @default(false)

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId  String?
  user    User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Function call data if applicable
  functionName String?
  functionArgs String? // JSON string

  @@index([sessionId])
  @@index([timestamp])
}

model SessionTag {
  id        String      @id @default(uuid())
  name      String
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, name])
  @@index([name])
}

// For Monday.com integration
model MondaySync {
  id         String   @id @default(uuid())
  sessionId  String   @unique
  itemId     String
  boardId    String
  lastSynced DateTime @default(now())

  @@index([itemId])
  @@index([boardId])
}

// Battery Department E-commerce Models Extension
// This extends the existing schema with commerce functionality

model Customer {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Customer Details
  companyName     String?
  billingAddress  Json? // { street, city, state, zip, country }
  shippingAddress Json? // { street, city, state, zip, country }
  taxId           String?
  phoneNumber     String?

  // Payment
  stripeCustomerId String?         @unique
  paymentMethods   PaymentMethod[]

  // Relationships
  orders        Order[]
  subscriptions Subscription[]
  invoices      Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stripeCustomerId])
}

model Product {
  id          String  @id @default(uuid())
  sku         String  @unique
  name        String
  description String?
  category    String // "battery", "module", "pack", "accessory"

  // Pricing
  basePrice Float
  currency  String @default("USD")

  // Specifications
  specifications Json? // { voltage, capacity, chemistry, weight, dimensions }
  images         Json? // JSON array of image URLs

  // Inventory
  inventoryItems Inventory[]

  // Relationships
  orderItems   OrderItem[]
  cartItems    CartItem[]
  priceHistory PriceHistory[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([sku])
}

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique

  // Customer
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Order Details
  status String      @default("pending") // pending, processing, shipped, delivered, cancelled
  items  OrderItem[]

  // Totals
  subtotal Float
  tax      Float
  shipping Float
  total    Float
  currency String @default("USD")

  // Shipping
  shippingAddress Json?
  shippingMethod  String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Payment
  paymentStatus   String    @default("pending") // pending, paid, failed, refunded
  paymentIntentId String?   @unique
  paidAt          DateTime?

  // Notes
  customerNotes String?
  internalNotes String?

  // Invoice
  invoiceId String?  @unique
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderNumber])
  @@index([customerId])
  @@index([status])
  @@index([paymentIntentId])
}

model OrderItem {
  id String @id @default(uuid())

  // Order
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Details
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Product snapshot at time of order
  productSnapshot Json? // { name, sku, specifications }

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

model Subscription {
  id String @id @default(uuid())

  // Customer
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Subscription Details
  status String           @default("active") // active, paused, cancelled, expired
  planId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])

  // Billing
  billingCycle       String   @default("monthly") // monthly, quarterly, yearly
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  nextBillingDate    DateTime

  // Stripe
  stripeSubscriptionId String? @unique

  // Metadata
  metadata     Json?
  cancelledAt  DateTime?
  cancelReason String?

  // Invoices
  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([status])
  @@index([stripeSubscriptionId])
}

model SubscriptionPlan {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Pricing
  price    Float
  currency String @default("USD")
  interval String @default("month") // month, quarter, year

  // Features
  features Json? // Array of feature descriptions

  // Limits
  limits Json? // { maxOrders, maxProducts, features }

  subscriptions Subscription[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String @id @default(uuid())
  invoiceNumber String @unique

  // Customer
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Type
  type String // "order", "subscription"

  // Related entities
  order          Order?
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  // Amounts
  subtotal Float
  tax      Float
  total    Float
  currency String @default("USD")

  // Status
  status  String    @default("pending") // pending, paid, overdue, cancelled
  dueDate DateTime
  paidAt  DateTime?

  // Payment
  paymentIntentId String? @unique
  paymentMethod   String?

  // PDF
  pdfUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([invoiceNumber])
  @@index([status])
}

model PaymentMethod {
  id String @id @default(uuid())

  // Customer
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Stripe
  stripePaymentMethodId String @unique

  // Details
  type        String // "card", "bank_account"
  last4       String
  brand       String? // For cards: visa, mastercard, etc
  expiryMonth Int? // For cards
  expiryYear  Int? // For cards

  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([stripePaymentMethodId])
}

model Inventory {
  id String @id @default(uuid())

  // Product
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Location
  location String // warehouse location

  // Quantities
  quantity          Int @default(0)
  reservedQuantity  Int @default(0)
  availableQuantity Int @default(0)
  reorderPoint      Int @default(10)
  reorderQuantity   Int @default(50)

  // Tracking
  batchNumber   String?
  serialNumbers Json? // JSON array of serial numbers

  lastRestocked DateTime?
  lastCounted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, location])
  @@index([productId])
  @@index([location])
}

model Cart {
  id String @id @default(uuid())

  // Session or User
  sessionId String? @unique
  userId    String? @unique
  user      User?   @relation(fields: [userId], references: [id])

  items CartItem[]

  expiresAt DateTime // Auto-cleanup after 30 days
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([userId])
  @@index([expiresAt])
}

model CartItem {
  id String @id @default(uuid())

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model PriceHistory {
  id String @id @default(uuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  price         Float
  previousPrice Float?
  currency      String @default("USD")

  reason String? // "market adjustment", "promotion", etc

  effectiveFrom  DateTime
  effectiveUntil DateTime?

  createdAt DateTime @default(now())

  @@index([productId])
  @@index([effectiveFrom])
}

model SystemHealth {
  id           String    @id @default(uuid())
  service      String    @unique
  status       String // "healthy", "degraded", "unhealthy"
  responseTime Float?
  errorRate    Float?    @default(0)
  uptime       Float?    @default(100)
  message      String?
  lastCheck    DateTime  @default(now())
  nextCheck    DateTime?
  metadata     Json? // Additional metadata

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([service])
  @@index([status])
}

model Notification {
  id       String    @id @default(uuid())
  userId   String?
  type     String // "system", "order", "chat", "alert"
  title    String
  message  String
  priority String    @default("low") // "low", "medium", "high", "critical"
  channel  String    @default("in-app") // "in-app", "email", "sms", "push"
  read     Boolean   @default(false)
  readAt   DateTime?
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

// Enhanced Analytics Models
model AnalyticsEvent {
  id            String   @id @default(uuid())
  sessionId     String
  userId        String?
  eventName     String
  eventCategory String
  eventData     Json // Compressed event-specific data
  dataPoints    Json // Compressed data points (150+ tracked)
  context       Json // Page, referrer, device info, etc.
  timestamp     DateTime
  createdAt     DateTime @default(now())

  @@index([sessionId])
  @@index([userId])
  @@index([eventName])
  @@index([eventCategory])
  @@index([timestamp])
  @@index([createdAt])
}

model AnalyticsSession {
  id        String    @id @default(uuid())
  userId    String?
  visitorId String? // For anonymous users
  startTime DateTime
  endTime   DateTime?
  duration  Int? // In seconds
  pageViews Int       @default(0)
  events    Int       @default(0)
  bounced   Boolean   @default(false)

  // Attribution data
  source   String? // utm_source or referrer
  medium   String? // utm_medium
  campaign String? // utm_campaign
  content  String? // utm_content
  term     String? // utm_term

  // Device/Browser
  deviceType       String?
  deviceBrand      String?
  browser          String?
  os               String?
  screenResolution String?

  // Geographic
  country String?
  region  String?
  city    String?

  // Aggregated metrics
  engagementScore Float?
  conversionValue Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([visitorId])
  @@index([startTime])
  @@index([source])
  @@index([country])
}

model AnalyticsMetric {
  id          String @id @default(uuid())
  name        String @unique
  type        String // count, sum, average, etc.
  category    String // engagement, conversion, technical, etc.
  calculation Json // Metric calculation definition

  // Cached aggregations for performance
  dailyValues   Json? // Last 30 days
  weeklyValues  Json? // Last 12 weeks
  monthlyValues Json? // Last 12 months

  lastCalculated DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([name])
  @@index([category])
}

model AnalyticsCohort {
  id         String @id @default(uuid())
  name       String @unique
  definition Json // Cohort definition (filters, conditions)
  userCount  Int    @default(0)

  // Cached metrics
  retentionData  Json? // Retention by day/week/month
  engagementData Json? // Average engagement metrics
  revenueData    Json? // Revenue metrics

  lastUpdated DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
}

model AnalyticsFunnel {
  id    String @id @default(uuid())
  name  String @unique
  steps Json // Funnel step definitions

  // Cached conversion data
  conversionRates Json? // Conversion rate per step
  dropoffRates    Json? // Dropoff rate per step
  avgTimePerStep  Json? // Average time per step

  lastCalculated DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([name])
}

model AnalyticsAttribution {
  id              String  @id @default(uuid())
  userId          String
  conversionId    String? // Order ID, subscription ID, etc.
  conversionType  String // purchase, subscription, lead, etc.
  conversionValue Float?

  // Attribution data
  touchpoints    Json // Array of touchpoints with timestamps
  model          String // firstTouch, lastTouch, linear, etc.
  channelWeights Json // Weight per channel based on model

  convertedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([conversionType])
  @@index([convertedAt])
}

model AnalyticsSegment {
  id         String @id @default(uuid())
  name       String @unique
  type       String // behavioral, demographic, technographic, etc.
  conditions Json // Segment conditions
  userCount  Int    @default(0)

  // Performance metrics
  avgEngagement  Float?
  avgRevenue     Float?
  conversionRate Float?

  lastUpdated DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name])
  @@index([type])
}

model AnalyticsReport {
  id         String @id @default(uuid())
  name       String
  type       String // dashboard, export, scheduled, etc.
  definition Json // Report configuration

  // Scheduling
  schedule String? // cron expression
  lastRun  DateTime?
  nextRun  DateTime?

  // Distribution
  recipients Json? // Email addresses
  format     String @default("pdf") // pdf, csv, excel

  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([createdBy])
}
