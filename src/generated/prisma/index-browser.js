
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  externalId: 'externalId',
  mondayUserId: 'mondayUserId',
  copilotUserId: 'copilotUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  systemPrompt: 'systemPrompt',
  isActive: 'isActive',
  userId: 'userId',
  userName: 'userName',
  userEmail: 'userEmail',
  ipAddress: 'ipAddress',
  location: 'location',
  source: 'source',
  category: 'category',
  mondayItemId: 'mondayItemId',
  mondaySynced: 'mondaySynced',
  copilotSynced: 'copilotSynced',
  databaseSynced: 'databaseSynced',
  lastMondaySync: 'lastMondaySync',
  lastCopilotSync: 'lastCopilotSync'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  timestamp: 'timestamp',
  isError: 'isError',
  userId: 'userId',
  functionName: 'functionName',
  functionArgs: 'functionArgs'
};

exports.Prisma.SessionTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sessionId: 'sessionId'
};

exports.Prisma.MondaySyncScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  itemId: 'itemId',
  boardId: 'boardId',
  lastSynced: 'lastSynced'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  taxId: 'taxId',
  phoneNumber: 'phoneNumber',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  category: 'category',
  basePrice: 'basePrice',
  currency: 'currency',
  specifications: 'specifications',
  images: 'images',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerId: 'customerId',
  status: 'status',
  subtotal: 'subtotal',
  tax: 'tax',
  shipping: 'shipping',
  total: 'total',
  currency: 'currency',
  shippingAddress: 'shippingAddress',
  shippingMethod: 'shippingMethod',
  trackingNumber: 'trackingNumber',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  paymentStatus: 'paymentStatus',
  paymentIntentId: 'paymentIntentId',
  paidAt: 'paidAt',
  customerNotes: 'customerNotes',
  internalNotes: 'internalNotes',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  productSnapshot: 'productSnapshot',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  status: 'status',
  planId: 'planId',
  billingCycle: 'billingCycle',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  nextBillingDate: 'nextBillingDate',
  stripeSubscriptionId: 'stripeSubscriptionId',
  metadata: 'metadata',
  cancelledAt: 'cancelledAt',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  features: 'features',
  limits: 'limits',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  customerId: 'customerId',
  type: 'type',
  subscriptionId: 'subscriptionId',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  paymentIntentId: 'paymentIntentId',
  paymentMethod: 'paymentMethod',
  pdfUrl: 'pdfUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  stripePaymentMethodId: 'stripePaymentMethodId',
  type: 'type',
  last4: 'last4',
  brand: 'brand',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  location: 'location',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  availableQuantity: 'availableQuantity',
  reorderPoint: 'reorderPoint',
  reorderQuantity: 'reorderQuantity',
  batchNumber: 'batchNumber',
  serialNumbers: 'serialNumbers',
  lastRestocked: 'lastRestocked',
  lastCounted: 'lastCounted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  price: 'price',
  previousPrice: 'previousPrice',
  currency: 'currency',
  reason: 'reason',
  effectiveFrom: 'effectiveFrom',
  effectiveUntil: 'effectiveUntil',
  createdAt: 'createdAt'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  responseTime: 'responseTime',
  errorRate: 'errorRate',
  uptime: 'uptime',
  message: 'message',
  lastCheck: 'lastCheck',
  nextCheck: 'nextCheck',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  channel: 'channel',
  read: 'read',
  readAt: 'readAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  eventName: 'eventName',
  eventCategory: 'eventCategory',
  eventData: 'eventData',
  dataPoints: 'dataPoints',
  context: 'context',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  visitorId: 'visitorId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  pageViews: 'pageViews',
  events: 'events',
  bounced: 'bounced',
  source: 'source',
  medium: 'medium',
  campaign: 'campaign',
  content: 'content',
  term: 'term',
  deviceType: 'deviceType',
  deviceBrand: 'deviceBrand',
  browser: 'browser',
  os: 'os',
  screenResolution: 'screenResolution',
  country: 'country',
  region: 'region',
  city: 'city',
  engagementScore: 'engagementScore',
  conversionValue: 'conversionValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsMetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  category: 'category',
  calculation: 'calculation',
  dailyValues: 'dailyValues',
  weeklyValues: 'weeklyValues',
  monthlyValues: 'monthlyValues',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsCohortScalarFieldEnum = {
  id: 'id',
  name: 'name',
  definition: 'definition',
  userCount: 'userCount',
  retentionData: 'retentionData',
  engagementData: 'engagementData',
  revenueData: 'revenueData',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsFunnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  steps: 'steps',
  conversionRates: 'conversionRates',
  dropoffRates: 'dropoffRates',
  avgTimePerStep: 'avgTimePerStep',
  lastCalculated: 'lastCalculated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsAttributionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  conversionId: 'conversionId',
  conversionType: 'conversionType',
  conversionValue: 'conversionValue',
  touchpoints: 'touchpoints',
  model: 'model',
  channelWeights: 'channelWeights',
  convertedAt: 'convertedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  conditions: 'conditions',
  userCount: 'userCount',
  avgEngagement: 'avgEngagement',
  avgRevenue: 'avgRevenue',
  conversionRate: 'conversionRate',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  definition: 'definition',
  schedule: 'schedule',
  lastRun: 'lastRun',
  nextRun: 'nextRun',
  recipients: 'recipients',
  format: 'format',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  ChatSession: 'ChatSession',
  Message: 'Message',
  SessionTag: 'SessionTag',
  MondaySync: 'MondaySync',
  Customer: 'Customer',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Subscription: 'Subscription',
  SubscriptionPlan: 'SubscriptionPlan',
  Invoice: 'Invoice',
  PaymentMethod: 'PaymentMethod',
  Inventory: 'Inventory',
  Cart: 'Cart',
  CartItem: 'CartItem',
  PriceHistory: 'PriceHistory',
  SystemHealth: 'SystemHealth',
  Notification: 'Notification',
  AnalyticsEvent: 'AnalyticsEvent',
  AnalyticsSession: 'AnalyticsSession',
  AnalyticsMetric: 'AnalyticsMetric',
  AnalyticsCohort: 'AnalyticsCohort',
  AnalyticsFunnel: 'AnalyticsFunnel',
  AnalyticsAttribution: 'AnalyticsAttribution',
  AnalyticsSegment: 'AnalyticsSegment',
  AnalyticsReport: 'AnalyticsReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
